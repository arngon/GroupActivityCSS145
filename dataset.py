# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13_qN4ypZnJt61F-fbgDKfVn-hAcp4IqG

*Group* 8 - BM4:


*   Gonzales, Arnold
*   Oalican, Maria Junella May
*   Paz, Cedric Anthony
*   San Miguel, Ian Rafael
*   Zuniga, Danilo Raqui
"""

import pandas as pd
import numpy as np
import os
import squarify
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import streamlit as st
from wordcloud import WordCloud
from io import StringIO

# Mount Google Drive
# drive.mount('/content/drive')

# Read file
df = pd.read_csv("laptop_price - dataset.csv")

# Create a Streamlit app
st.title("Laptop Market Analysis")

# Data Table
st.subheader("Data Table")
st.write(df.head())

# Info
buffer = StringIO()
df.info(buf=buffer)
df_info_as_string = buffer.getvalue()
st.subheader("Data Info")
st.text(df_info_as_string)

# Describe
st.subheader("Data Description")
st.write(df.describe())

# Sum
st.subheader("Missing Values")
st.write(df.isnull().sum())

# Total company
st.subheader("Total Companies")
st.write("The number of brands in Company column is", df['Company'].nunique())
brand_counts = df['Company'].value_counts()
st.write("There are {} unique brands in the dataset, including:".format(len(brand_counts)))
st.write(brand_counts)

# Scatter
st.subheader("Scatter Plot")
st.markdown("""
 The Scatter plot here shows the average purchase price and weight of Laptops that are being sold in the market, The average price of a laptop is around 700-2000 euros, and weight around 1.15-2.5KG.
 """)
fig, ax = plt.subplots()
ax.scatter(df['Weight (kg)'], df['Price (Euro)'], s=32, alpha=.8)
ax.spines[['top', 'right',]].set_visible(False)
ax.set_xlabel('Weight (kg)')
ax.set_ylabel('Price (Euro)')
ax.set_title('Weight and Price')
st.pyplot(fig)

# Pie Chart
st.subheader("Product and Product Count")
Product = df.Product.value_counts().reset_index(name='Product_count').iloc[:20]
fig = px.pie(
    data_frame=Product,
    names='Product', values='Product_count',
    hole=.1,
    color_discrete_sequence=px.colors.sequential.RdBu,
    height=500, width=1000,
)
fig.update_traces(textposition='inside', textinfo='label+value')
st.plotly_chart(fig)

# Bar
st.subheader("TypeName of Laptops")
fig, ax = plt.subplots()
df.groupby('TypeName').size().plot(kind='barh', ax=ax, color=sns.palettes.mpl_palette('Dark2'))
ax.spines[['top', 'right',]].set_visible(False)
ax.set_xlabel('Frequency')
st.pyplot(fig)

# Histogram
st.subheader("Weight (kg)")
fig, ax = plt.subplots()
df['Weight (kg)'].plot(kind='hist', bins=20, edgecolor='black', ax=ax)
ax.spines[['top', 'right',]].set_visible(False)
ax.set_xlabel('Weight (kg)')
ax.set_ylabel('Frequency')
ax.set_title('Weight (kg)')
st.pyplot(fig)

# Line
st.subheader("RAM (GB)")
fig, ax = plt.subplots()
df['RAM (GB)'].plot(kind='line', ax=ax)
ax.spines[['top', 'right']].set_visible(False)
ax.set_ylabel('RAM (GB)')
ax.set_xlabel('Frequency')
ax.set_title('RAM (GB)')
st.pyplot(fig)

# Candle Stick
st.subheader("Distribution of Laptop Prices by Company")
fig, ax = plt.subplots()
df.boxplot(column='Price (Euro)', by='Company', ax=ax, figsize=(12, 6), rot=45)
ax.set_xlabel('Company')
ax.set_ylabel('Price (Euro)')
ax.set_title('Distribution of Laptop Prices by Company')
st.pyplot(fig)

# Bubble Chart
st.subheader("Bubble Chart: CPU Frequency vs Price (Bubble Size = RAM)")
fig, ax = plt.subplots()
ax.scatter(df['CPU_Frequency (GHz)'], df['Price (Euro)'], s=df['RAM (GB)'] * 20, alpha=0.5, c='blue')
ax.set_xlabel('CPU Frequency (GHz)')
ax.set_ylabel('Price (Euro)')
ax.set_title('Bubble Chart: CPU Frequency vs Price (Bubble Size = RAM)')
st.pyplot(fig)


# Tree Map
st.subheader("Treemap: Total Laptop Prices by Company")
#company_prices = df.groupby('Company')['Price (Euro)'].sum().reset_index()
#fig, ax = plt.subplots()
#squarify.plot(sizes=company_prices['Price (Euro)'], label=company_prices)
#st.pyplot(plt)
#plt.clf()


def treemap():
    # squarify.plot(...) - used to create the treemap
    # sizes=values - assigns the values data to determine the sizes of rectangles in the treemap
    # label=categories - assigns the labels to the rectangles
    # color - defines the color of the rectangles
    # alpha=0.7 - controls the transparency of the rectangles
    # 0 is fully transparent and 1 is opaque
    # plt.axis('off') - hides the x and y axis of the plot
    squarify.plot(sizes=company_prices, label=company_prices, color=['red', 'green', 'blue', 'orange'], alpha=0.7)
    plt.title('Treemap Example')
    plt.axis('off')
    st.pyplot(plt)
    plt.clf()
treemap()